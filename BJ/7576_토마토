import java.awt.Point;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static class toma{
		int x,y,dep;

		public toma(int x, int y, int dep) { //토마토 위치와 층(일수)class
			super();
			this.x = x;
			this.y = y;
			this.dep = dep;
		}
		
	}
	static int N,M,count;
	static int[][] box;
	static boolean[][] visited;
	static int[] dx = {-1,0,1,0};
	static int[] dy = {0,1,0,-1};
	static Queue<toma> tomato;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		N = Integer.parseInt(st.nextToken());//상자 가로 칸
		M = Integer.parseInt(st.nextToken());//상자 세로 칸
		
		
		box = new int[M][N]; //토마토 상자
		visited = new boolean[M][N]; //익은 토마토 처리
		
		for(int i = 0; i < M; i++) { //상자안 토마토 정보 입력
			st = new StringTokenizer(br.readLine());
			for(int j = 0; j < N; j++) {
				box[i][j] = Integer.parseInt(st.nextToken());
			}
		}
	
		tomato = new LinkedList<toma>(); //bfs사용할 queue
		
		for(int i = 0; i < M; i++) {
			for(int j = 0; j < N; j++) {
				if(box[i][j] == 1) {
					tomato.add(new toma(i,j,0)); //익은 토마토 위치 저장
					visited[i][j] = true; //익은 토마토 방문처리
				}
			}
		}
		count = 0; //최소일수 계산을 위한 변수
		bfs();
		
		if(check()) { //토마토가 모두 익었는지여부 확인
			System.out.println(count); //모두 익었으면 총 걸린시간 출력
		}else {
			System.out.println(-1); //다 익지 못했으면 -1출력
		}
		
		
		
	}

	private static boolean check() {
		for(int i = 0; i < M; i++) {
			for(int j = 0; j < N; j++) {
				if(box[i][j] == -1)continue; //토마토 없는 구역은 넘긴다
				
				if(!visited[i][j]) { //안익은게 있으면 false return
					return false;
				}
			}
		}
		return true; //모두 익었으면 true return
	}

	private static void bfs() {
		while(!tomato.isEmpty()) {
			toma l = tomato.poll();
			if(l.dep > count) { //층이 변했다는 건 일수가 변했다는 것
				count++;
			}
			
			for(int i = 0; i < 4; i++) { //4방 탐색 
				int nx = l.x + dx[i];
				int ny = l.y + dy[i];
				
				//범위 확인
				if(nx < 0 || nx >= M || ny < 0 || ny >= N || visited[nx][ny] || box[nx][ny] == -1)continue;
				
				
				//최외곽 토마토 추가
				tomato.add(new toma(nx, ny, l.dep+1));
				visited[nx][ny] = true;
				
			}
			
		}	
		
	}

}
